#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/nd.p2/V6LC_2_1_14.seq,v 1.9 2009/12/28 05:55:16 akisada Exp $
#
########################################################################

use nd;

BEGIN {}
END   {}

if($V6evalTool::NutDef{'Type'} ne 'router') {
	exitRouterOnly();
	#NOTREACHED
}

$pktdesc{'nd_mcast_ns_sll_anycast'}
	= '    Send NS w/ SLL: TN (global) -&gt; Subnet-Router anycast address';
$pktdesc{'anycast_recv_na_RSo_tll'}
	= '    Recv NA (RSo) w/ TLL: NUT (global) -&gt; TN (global)';
$pktdesc{'anycast_recv_na_RSo_tll_linklocal'}
	= '    Recv NA (RSo) w/ TLL: NUT (link-local) -&gt; TN (global)';
$pktdesc{'anycast_recv_na_RSO_tll'}
	= '    Recv NA (RSO) w/ TLL: NUT (global) -&gt; TN (global)';
$pktdesc{'anycast_recv_na_RSO_tll_linklocal'}
	= '    Recv NA (RSO) w/ TLL: NUT (link-local) -&gt; TN (global)';

my $ns = 'nd_mcast_ns_sll_anycast';

startNdiscWorld($Link0);

my @na = ndSetNa4mcastNsAnycast();

if(MaxAnycastDelayTime($Link0, 3, $ns, \@na) < 0) {
	exitFail();
	#NOTREACHED
}

exitPass();
#NOTREACHED



#------------------------------#
# MaxAnycastDelayTime()        #
#------------------------------#
sub
MaxAnycastDelayTime($$$$)
{
	my ($Link, $times, $ns, $na_ref) = @_;

	my @na = @$na_ref;

	my $returnv	= 0;

	my @delays	= ();

	vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure'.
		'</B></U></FONT><BR>');

	my $got_na = 0;
	
	vLogHTML('<FONT SIZE="4"><U><B>'.
			 "Delay calculation".
			 '</B></U></FONT><BR>');

	my %vsend = vSend($Link0, $ns);
	my %vrecv = vRecvWrapper($Link0, $MAX_ANYCAST_DELAY_TIME + 1,
							 0, 0, @na);

	if($vrecv{'recvCount'}) {
		foreach my $frame (@na) {
			if($vrecv{'recvFrame'} eq $frame) {
				$got_na ++;
			}
		}
	}

	unless($got_na) {
		vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NA'.
				 '</B></FONT><BR>');
		
		return(-1);
	}
	
	my $sendtime = $vsend{'sentTime1'};
	my $recvtime = $vrecv{'recvTime' . $vrecv{'recvCount'}};
	
	vLogHTML('<TABLE>');
	vLogHTML('<TR>');
	vLogHTML("<TD>Send NS</TD>");
	vLogHTML('<TD>:</TD>');
	vLogHTML("<TD>$sendtime sec.</TD>");
	vLogHTML('</TR>');
	vLogHTML('<TR>');
	vLogHTML("<TD>Recv NA</TD>");
	vLogHTML('<TD>:</TD>');
	vLogHTML("<TD>$recvtime sec.</TD>");
	vLogHTML('</TR>');
	
	my $delta = $recvtime - $sendtime;
	
	vLogHTML('<TR>');
	vLogHTML("<TD>Delay</TD>");
	vLogHTML('<TD>:</TD>');
	vLogHTML("<TD>$delta sec.</TD>");
	vLogHTML('</TR>');
	vLogHTML('</TABLE>');
	
	push(@delays, $delta);
	
	if($returnv < 0) {
		vLogHTML('<FONT COLOR="#FF0000">If the Target Address is an anycast address the sender SHOULD delay</FONT><BR>');
		vLogHTML('<FONT COLOR="#FF0000">sending a response for a random time between 0 and</FONT><BR>');
		vLogHTML('<FONT COLOR="#FF0000">MAX_ANYCAST_DELAY_TIME seconds.</FONT><BR>');
	}

	if ($delta > $MAX_ANYCAST_DELAY_TIME) {
		vLogHTML('<FONT COLOR="#FF0000">over MAX_ANYCAST_DELAY_TIME seconds.</FONT><BR>');
		exitFail();
	}

	return($returnv);
}



#------------------------------#
# ndSetNa4mcastNsAnycast()     #
#------------------------------#
sub
ndSetNa4mcastNsAnycast()
{
	my @na = ();

	push(@na, 'anycast_recv_na_RSo_tll');
	push(@na, 'anycast_recv_na_RSo_tll_linklocal');

	if($IGN_NA_O_FLAG) {
		push(@na, 'anycast_recv_na_RSO_tll');
		push(@na, 'anycast_recv_na_RSO_tll_linklocal');
	}

	return(@na);
}



#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Test v6LC.2.1.14 - Neighbor Solicitation Processing, Anycast (Routers Only)

=head1 Purpose

   Verify that a router properly processes a Neighbor Solicitation for an anycast address.

=head1 References

  * [IPv6-ARCH]  Section 2, 2.6, 2.6.1, 2.8
  * [ND]  Sections 7.2.3 and 7.2.4

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  No Common Test Setup is performed. Wait at least 3 seconds
  (MAX_MULTICAST_SOLICIT * RETRANS_TIMER) after any previous cleanup to make sure all
  previous NCE's are in state No NCE. The Common Test Cleanup procedure is performed after each part.
                        1. Configure the RUT to advertise prefix X on Link B.
                        2. Configure an address with prefix X on the RUT.

=head1 Procedure

  1. TN1 transmits a Neighbor Solicitation to the RUT's Subnet-Router anycast address.
  2. Observe the packets transmitted by the RUT.

=head1 Observable Results

  Step 2:
  The RUT should respond to TN1 by sending a Neighbor Advertisement between 0 and
  MAX_ANYCAST_DELAY_TIME after it receives the Neighbor Solicitation. The RUT's Neighbor
  Advertisement should contain a value of 0 in the override flag field.

=head1 Possible Problems

  * None.

=cut


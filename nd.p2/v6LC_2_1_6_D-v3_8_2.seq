#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/nd.p2/v6LC_2_1_6_D-v3_8_2.seq,v 1.9 2009/12/28 05:55:17 akisada Exp $
#
########################################################################

use nd;

BEGIN {}
END   {}

my $ereq = 'ndisc_ereq_GL';

startNdiscWorld($Link0);

if(setupCommon11($Link0) < 0) {
	exitInitFail();
	#NOTREACHED
}

$NOT_USE_FAST_CHANGE_STATE ++;

vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

if(ndiscNone2DelayLoose($Link0, $ereq) < 0) {
	$cleanup_tn_global = 1;
	exitFail();
	#NOTREACHED
}

if(ndProbe2None($Link0, $ereq) < 0) {
	$cleanup_tn_global = 1;
	exitFail();
	#NOTREACHED
}

exitPass();
#NOTREACHED



#------------------------------#
# setupCommon11()              #
#------------------------------#
sub setupCommon11 {
	my ($Link) = @_;

	$NEED_COMMON_CLEANUP = 1;

	vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Common Test Setup 1.1</B></U></FONT><BR>');

	if($V6evalTool::NutDef{'Type'} eq 'router') {
		if(vRemote(
			'route.rmt',
			'cmd=add',
			'prefix=default',
			"gateway=fe80::200:ff:fe00:a0a0",
			"if=$V6evalTool::NutDef{'Link0_device'}"
		)) {
			vLogHTML('<FONT COLOR="#FF0000"><B>'.
					 'route.rmt: Could\'t set route'.
					 '</B></FONT><BR>');
			return(0);
		}

		$tr1_default    = 1;
	} else {
		my $ra = 'mcast_ra_commonsetup';

		vClear($Link);
		vSend($Link, $ra);
		ignoreDAD($Link);

		$tr1_default = 1;
	}

	my %nd_hash = (
		'ns_l2l'        => 'na_l2l',
		'ns_g2l'        => 'na_l2g',
	);

	my $ereq = 'setup_echo_request';
	my $erep = 'setup_echo_reply';
	my @frames = ('ns_l2l', 'ns_g2l');

	my $mcast_ns    = '';

	vClear($Link);
	vSend($Link, $ereq);

	my %ret1 = vRecvWrapper($Link, $TimeOut, 0, 0, @frames);
	if($ret1{'recvCount'}) {
		foreach my $frame (@frames) {
			if($ret1{'recvFrame'} eq $frame) {
				$mcast_ns = $frame;
				last;
			}
		}
	}

	if($mcast_ns eq '') {
		vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NS</B></FONT><BR>');
		return(-1);
	}

	my $na = $nd_hash{$mcast_ns};

	vClear($Link);
	vSend($Link, $na);
	$tr1_cache = 1;

	my %ret2 = vRecvWrapper($Link, $TimeOut, 0, 0, $erep);
	if($ret2{'recvCount'}) {
		if($ret2{'recvFrame'} ne $erep) {
			return(-1);
		}
	}

	return(0);
}

#
# perldoc
#
########################################################################
__END__

=head1 NAME

  Test v6LC.2.1.6 - Neighbor Solicitation Origination, Reachability Confirmation
  Part D: Neighbor Solicitation Origination, Global => Link-local

=head1 Purpose

  Verify that a node properly originates Neighbor Solicitations when trying to confirm the
  reachability of a neighbor.

=head1 References

  * [ND]  Section 7.3

=head1 Resource Requirements

  * Packet generator
  * Monitor to capture packets

=head1 Test Setup

  Perform Common Test Setup 1.1 with a Retransmit Interval value of 1 second before
  each part. The Common Test Cleanup Procedure is performed after each part.

  The Reachable Time is 30 seconds in the Router Advertisement transmitted by TR1 in Common Test
  Setup 1.1.

=begin html

<BLOCKQUOTE>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Packet A</Caption>
<TR>
<TD>
	IPv6 Header<br>
	Next Header: 58<br>
	Source Address: TN1's local Address<br>
	Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Packet B</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN1's Global Address<br>
	Destination Address: NUT's Global Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>

<br>

<TABLE>
<TR>

<TD>
<TABLE BORDER>
<Caption>Packet C</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN1's local Address<br>
        Destination Address: NUT's Link-local Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

<TD>
<TABLE BORDER>
<Caption>Packet D</Caption>
<TR>
<TD>
        IPv6 Header<br>
        Next Header: 58<br>
        Source Address: TN1's Global Address<br>
        Destination Address: NUT's Global Address
</TD>
</TR>
<TR>
<TD>ICMPv6 Echo Request</TD>
</TR>
</TABLE>
</TD>

</TR>
</TABLE>

</BLOCKQUOTE>

=end html

=head1 Procedure

  Part D: Neighbor Solicitation Origination, Global => Link-local
   22. TN1 transmit Packet D. The source address is TN1's global address and the destination address is
       the NUT's link-local address.
   23. Observe the packets transmitted by the NUT. TN1 sends a Neighbor Advertisement upon
       receiving Neighbor Solicitations from the NUT.
   24. Wait REACHABLE_TIME * MAX_RANDOM_FACTOR seconds so that the NCE of TN1
       transit to state STALE.
   25. TN1 transmits Packet A. The source address is TN1's global address and the destination address
       is the NUT's link-local address.
   26. Observe the packets transmitted by the NUT.
   27. Wait DELAY_FIRST_PROBE_TIME seconds so that NCE of TN1 transit to state PROBE.
   28. Observe the packets transmitted by the NUT.

=head1 Observable Results

  Part D
   Step 23: 
   In response to Packet D, the NUT should transmit Neighbor Solicitations with a
   Target Address equal to the TN1's global Address at intervals of 1 second. The NUT MUST
   transmit no more than 1 Neighbor Solicitation every 1 second. Once a Neighbor
   Advertisement is received from TN1, the NUT should send an Echo Reply in response to
   Packet D. The NCE of TN1 is in state REACHABLE.

   Step 26: 
   In response to Packet D, the NUT should transmit an Echo Reply.
   
   Step 28: The NUT should transmit Neighbor Solicitations with the NUT's global or link-
   local address being the source address and TN1's global address as the destination address.
   The maximum number of Neighbor Solicitations that the NUT can transmit is 3.

=head1 Possible Problems

  * None. 

=cut


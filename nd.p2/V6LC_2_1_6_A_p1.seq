#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/nd.p2/V6LC_2_1_6_A_p1.seq,v 1.3 2008/07/31 04:41:26 hide Exp $
#
########################################################################

use nd;

BEGIN {}
END   {}

startNdiscWorld($Link0);



#-- AdvRetransTimer: 1 ------------------------------------------------#
vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>Procedure</B></U></FONT><BR>');

my $retransTimer = 1;
if(setupCommon11_local($Link0, $retransTimer, 'mcast_ra_commonsetup', 0) < 0) {
	exitFail();
	#NOTREACHED
}



my $ereq = 'ndisc_ereq_LL';
vClear($Link0);
vSend($Link0, $ereq);

my @frames = mcastNS($ereq);
my $recvCount = 0;
my $solicit = 0;

$TimeOut = 1 + 1;
my @recvTimes = ();

for( ; ; ) {
	my %ret = vRecvWrapper($Link0, $TimeOut, 0, 0, @frames);

	if($ret{'recvCount'}) {
		$recvCount += $ret{'recvCount'};

		foreach my $frame (@frames) {
			if($ret{'recvFrame'} eq $frame) {
				$solicit ++;
				$recvCount --;
				push(@recvTimes,
					$ret{'recvTime'.$ret{'recvCount'}});
				last;
			}
		}

		if($solicit > $MAX_MULTICAST_SOLICIT) {
			vLogHTML('<FONT COLOR="#FF0000"><B>'.
				'Observed too many NSs</B></FONT><BR>');

			exitFail();
		}

		next;
	}

	last;
}

unless($solicit) {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Could\'t observe NS</B></FONT><BR>');

	exitFail();
}

if($solicit < $MAX_MULTICAST_SOLICIT) {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Observed too less NSs</B></FONT><BR>');

	exitFail();
}

if(checkInterval($retransTimer, @recvTimes) < 0) {
	exitFail();
}



exitPass();
#NOTREACHED



#------------------------------#
# checkInterval                #
#------------------------------#
sub
checkInterval($@)
{
	my ($retransTimer, @recvtimes) = @_;
	my $returnvalue = 0;

	vLogHTML('<TABLE>');

	for(my $d = 0; $d <= $#recvtimes; $d ++) {
		vLogHTML('<TR>');
		vLogHTML("<TD ROWSPAN=\"2\">Recv[$d]</TD>");
		vLogHTML('<TD ROWSPAN="2">:</TD>');
		vLogHTML("<TD ROWSPAN=\"2\">$recvtimes[$d] sec.</TD>");

		if($d == 0) {
			vLogHTML('<TD COLSPAN="4">&nbsp;</TD>');
		}

		vLogHTML('</TR>');

		vLogHTML('<TR>');

		if($d == $#recvtimes) {
			vLogHTML('<TD COLSPAN="4">&nbsp;</TD>');
		} else {
			my $delta = $recvtimes[$d + 1] - $recvtimes[$d];

			vLogHTML("<TD ROWSPAN=\"2\">Interval[$d]</TD>");
			vLogHTML('<TD ROWSPAN="2">:</TD>');
			vLogHTML(sprintf("<TD ROWSPAN=\"2\">%.6f sec.</TD>",
				$delta));

			my $margin = 0.5;
			if(($delta < $retransTimer - $margin) ||
				($delta > $retransTimer + $margin)) {

				vLogHTML('<TD ROWSPAN="2">');
				vLogHTML('<FONT COLOR="#FF0000">*</FONT>');
				vLogHTML('</TD>');
				$returnvalue = -1;
			} else {
				vLogHTML('<TD ROWSPAN="2">&nbsp;</TD>');
			}
		}

		vLogHTML('</TR>');
	}

	vLogHTML('</TABLE>');

	if($returnvalue < 0) {
		vLogHTML('<FONT COLOR="#FF0000">'.
			'Retransmissions MUST be rate-limited to '.
			'at most one solicitation per<BR>');
		vLogHTML('<FONT COLOR="#FF0000">'.
			'neighbor every RetransTimer milliseconds.<BR>');
	}

	return($returnvalue);
}



#------------------------------#
# setupCommon11_local()        #
#------------------------------#
sub
setupCommon11_local($$)
{
	my ($Link, $retrans, $ra, $bool) = @_;

	vLogHTML("set RetransTimer=$retransTimer<BR>");

	$NEED_COMMON_CLEANUP = 1;

	if($V6evalTool::NutDef{'Type'} eq 'router') {
		#if(vRemote(
		#	'route.rmt',
		#	'cmd=add',
		#	'prefix=default',
		#	"gateway=fe80::200:ff:fe00:a0a0",
		#	"if=$V6evalTool::NutDef{'Link0_device'}"
		#)) {
		#	vLogHTML('<FONT COLOR="#FF0000"><B>route.rmt: Could\'t set route</B></FONT><BR>');
		#	exitFatal();
		#}
		#
		#$tr1_default = 1;

		my $str = sprintf("%s", $retrans * 1000);
		vClear($Link);
		if(vRemote('racontrol.rmt', 'mode=start',
			"retrans=$str",
			"link0=$V6evalTool::NutDef{'Link0_device'}")) {

			vLogHTML('<FONT COLOR="#FF0000"><B>racontrol.rmt: '.
				'Could\'t start to send RA</B></FONT><BR>');

			exitFatal();
			#NOTREACHED
		}

		$rut_rtadvd	= 1;

		if($bool) {
			$rut_rtadvd_retrans	= 1;
		}

		vRecv($Link,
			$MAX_INITIAL_RTR_ADVERT_INTERVAL *
			$MAX_INITIAL_RTR_ADVERTISEMENTS +
			$MIN_DELAY_BETWEEN_RAS + 1,
			0, 0);

		return(0);
	}



	if($V6evalTool::NutDef{'Type'} ne 'router') {
		my %nd_hash = (
			'ns_l2l'	=> 'na_l2l',
			'ns_g2l'	=> 'na_l2g',
			'ucast_ns_l2l'	=> 'na_l2l',
			'ucast_ns_g2l'	=> 'na_l2g',
			'ucast_ns_sll_l2l'	=> 'na_l2l',
			'ucast_ns_sll_g2l'	=> 'na_l2g',
		);

		vClear($Link);
		vSend($Link, $ra);
		ignoreDAD($Link);

		if($bool) {
			$force_cleanup_r0 = 1;
		}

		$tr1_default = 1;
		my $ereq = 'setup_echo_request';
		my $erep = 'setup_echo_reply';
		my @frames = ();

		if($bool) {
			push(@frames, 'ucast_ns_l2l');
			push(@frames, 'ucast_ns_g2l');
			push(@frames, 'ucast_ns_sll_l2l');
			push(@frames, 'ucast_ns_sll_g2l');
		} else {
			push(@frames, 'ns_l2l');
			push(@frames, 'ns_g2l');
		}

		my $mcast_ns	= '';

		vClear($Link);
		vSend($Link, $ereq);

		if($bool) {
			my %ret1 = vRecvWrapper($Link, $TimeOut, 0, 0, $erep);
			if($ret2{'recvCount'}) {
				if($ret2{'recvFrame'} ne $erep) {
					return(-1);
				}
			}

			my %ret2 = vRecvWrapper($Link, 5 + $retrans + 1, 0, 0, @frames);
			if($ret1{'recvCount'}) {
				foreach my $frame (@frames) {
					if($ret1{'recvFrame'} eq $frame) {
						$mcast_ns = $frame;
						last;
					}
				}
			}

			my $na = $nd_hash{$mcast_ns};

			vClear($Link);
			vSend($Link, $na);
			$tr1_cache = 1;
		} else {
			my %ret1 = vRecvWrapper($Link, $retrans + 1, 0, 0, @frames);
			if($ret1{'recvCount'}) {
				foreach my $frame (@frames) {
					if($ret1{'recvFrame'} eq $frame) {
						$mcast_ns = $frame;
						last;
					}
				}
			}

			if($mcast_ns eq '') {
				vLogHTML('<FONT COLOR="#FF0000"><B>Could\'t observe NS</B></FONT><BR>');
				return(-1);
			}



			my $na = $nd_hash{$mcast_ns};

			vClear($Link);
			vSend($Link, $na);
			$tr1_cache = 1;

			my %ret2 = vRecvWrapper($Link, $TimeOut, 0, 0, $erep);
			if($ret2{'recvCount'}) {
				if($ret2{'recvFrame'} ne $erep) {
					return(-1);
				}
			}
		}

		return(0);
	}

	return(-1);
}



#
# perldoc
#
########################################################################
__END__

=head1 NAME

=begin html
<BLOCKQUOTE><TT>
V6LC_2_1_6_A - Verify that the NUT transmits NSs in INCOMPLETE (link-local => link-local)

=end html

=begin html
</TT></BLOCKQUOTE>

=end html

=head1 TARGET

=begin html
<BLOCKQUOTE>
<TT>Host/Router</TT>
</BLOCKQUOTE>

=end html

=head1 TOPOLOGY

=begin html
<BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
                    |
   TN1     NUT      R0
    |       |       |
----+-------+-------+--- Link0
</PRE>
</BLOCKQUOTE>
<P>
<TABLE BORDER>
<TR>
<TD ROWSPAN="2"><TT>Link0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::/64</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>R0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100:200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a0:a0</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>TN1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;TnDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;TnDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;TnDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>NUT</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

=head1 SETUP

=begin html
<BLOCKQUOTE>
<TT><B>This minimal setup procedure provides the NUT with a default router TR1, a global prefix, and ensures that the NUT can communicate with TR1.</B></TT>
<BLOCKQUOTE>
<PRE>
   TR1     HUT
    |       |
    | -->   | RA
    |       |
    *       | Wait (MAX_RTR_SOLICITATION_DELAY + RetransTimer * DupAddrDetectTransmits)
    |       |
    | ----> | Echo Request
    |   <-- | NS
    | ----> | NA
    | <---- | Echo Reply
    |       |
    V       V
</PRE>
</BLOCKQUOTE>
<P>
<PRE>
1. Send RA
</PRE>
<PRE>
        IPv6 header
            hop limit          = 255
            source             = TR1 (link-local)
            destination        = all-nodes multicast address
        RA
            cur hop limit      = 64
            M                  = 0
            O                  = 0
            router lifetime    = 1800
            reachable time     = 30000
            retrans timer      = 1000
        Prefix Information option
            prefix length      = 64
            L                  = 1
            A                  = 1
            valid Lifetime     = 2592000
            preferred lifetime = 604800
            prefix             = 3ffe:501:ffff:100::
</PRE>
<PRE>
2.  Wait (MAX_RTR_SOLICITATION_DELAY + RetransTimer * DupAddrDetectTransmits)
</PRE>
<PRE>
        Host constants:
            MAX_RTR_SOLICITATION_DELAY: 1 second
</PRE>
<PRE>
        Node constants:
            RETRANS_TIMER             : 1,000 milliseconds
</PRE>
<PRE>
        Host Variables:
            RetransTimer
                Default               : RETRANS_TIMER milliseconds
</PRE>
<PRE>
        Node Variables:
            DupAddrDetectTransmits
                Default               : 1
</PRE>
<PRE>
3. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TR1 (link-local)
            destination = HUT (link-local)
        Echo Request
</PRE>
<PRE>
4. Observe NS
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = HUT (link-local)
            destination = TR1 (solicited-node multicast address)
        NS
            target      = TR1 (link-local)
        SLL option
</PRE>
<PRE>
5. Send NA
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = TR1 (link-local)
            destination = HUT (link-local)
        NA
            R           = 1
            S           = 1
            O           = 1
            target      = TR1 (link-local)
        TLL option
</PRE>
<PRE>
6. Observe Echo Reply
</PRE>
<PRE>
        IPv6 header
            source      = HUT (link-local)
            destination = TR1 (link-local)
        Echo Reply
</PRE>
</BLOCKQUOTE>

=end html

=head1 INITIALIZATION

=begin html
<BLOCKQUOTE>
<PRE>
none
</PRE>
</BLOCKQUOTE>

=end html

=head1 TEST PROCEDURE

=begin html
<BLOCKQUOTE>
<TT><B>- Verify that NUT transmits valid NSs in INCOMPLETE state</B></TT><BR>
<TT><B>- Verify that NUT transmits multicast NSs 3 times</B></TT><BR>
<TT><B>- Verify that NUT selects source address of NS correctly</B></TT><BR>
<BLOCKQUOTE>
<PRE>
   TN1     NUT
    |       |
    | ----> | Echo Request
    |   <-- | NS (multicast) [<A HREF="#PRC1">Judgment #1</A>]
    |   <-- | NS (multicast)
    |   <-- | NS (multicast)
    |       |
    | -->   | RA
    | ----> | Echo Request
    |   <-- | NS (multicast) [<A HREF="#PRC1">Judgment #2</A>]
    |   <-- | NS (multicast)
    |   <-- | NS (multicast)
    |       |
    V       V
</PRE>
</BLOCKQUOTE>
<P>
<PRE>
1. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TN1 (link-local)
            destination = NUT (link-local)
        Echo Request
</PRE>
<PRE>
    State: <FONT COLOR="#FF0000">INCOMPLETE</FONT> (TN1) (global)
</PRE>
<PRE>
<A NAME="PRC1">2. Observe MAX_MULTICAST_SOLICIT NSs [<A HREF="#JDG1">Judgment #1</A>]
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = NUT (link-local)
            destination = TN1 (solicited-node multicast address)
        NS
            target      = TN1 (link-local)
        SLL option
</PRE>
<PRE>
        Node constants:
            MAX_MULTICAST_SOLICIT: 3 transmissions
</PRE>
<PRE>
3. Send RA
</PRE>
<PRE>
        IPv6 header
            hop limit          = 255
            source             = TR1 (link-local)
            destination        = all-nodes multicast address
        RA
            cur hop limit      = 64
            M                  = 0
            O                  = 0
            router lifetime    = 1800
            reachable time     = 30000
            retrans timer      = 5000
        Prefix Information option
            prefix length      = 64
            L                  = 1
            A                  = 1
            valid Lifetime     = 2592000
            preferred lifetime = 604800
            prefix             = 3ffe:501:ffff:100::
</PRE>
<PRE>
4. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TN1 (link-local)
            destination = NUT (link-local)
        Echo Request
</PRE>
<PRE>
<A NAME="PRC2">5. Observe MAX_MULTICAST_SOLICIT NSs [<A HREF="#JDG2">Judgment #2</A>]
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = NUT (link-local)
            destination = TN1 (solicited-node multicast address)
        NS
            target      = TN1 (link-local)
        SLL option
</PRE>
<PRE>
        Node constants:
            MAX_MULTICAST_SOLICIT: 3 transmissions
</PRE>
</BLOCKQUOTE>

=end html

=head1 JUDGEMENT

=begin html
<BLOCKQUOTE>
<PRE>
<A NAME="JDG1">[<A HREF="#PRC1">Judgment #1</A>] NUT must transmit 3 NSs to TN1 (solicited-node multicast address) at intervals of 1 second
<A NAME="JDG2">[<A HREF="#PRC2">Judgment #2</A>] NUT must transmit 3 NSs to TN1 (solicited-node multicast address) at intervals of 5 seconds
</PRE>
</BLOCKQUOTE>

=end html

=head1 CLEANUP

=begin html
<BLOCKQUOTE>
<TT><B>- Remove global address</B></TT><BR>
<BLOCKQUOTE>
<PRE>
   TN1     NUT      R0
    |       |       |
    |       |   <-- | RA (rltime=0, vltime=0, pltime=0) (If NUT isn't Router)
    |       |       |
    V       V       V
</PRE>
</BLOCKQUOTE>
<P>
<PRE>
    State: <FONT COLOR="#FF0000">NONE</FONT> (TN1) (link-local)
</PRE>
<PRE>
1. Send RA (If NUT isn't Router)
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = R0 (link-local)
            destination = all-nodes multicast address
        RA
            cur hop limit   = 64
            M               = 0
            O               = 0
            router lifetime = 0
            reachable time  = 0
            retrans timer   = 0
        Prefix Information option
            prefix length      = 64
            L                  = 1
            A                  = 1
            valid Lifetime     = 0
            preferred lifetime = 0
            prefix             = 3ffe:501:ffff:100::
</PRE>
<PRE>
    State: <FONT COLOR="#FF0000">NONE</FONT> (TN1) (link-local)
</PRE>
</BLOCKQUOTE>

=end html

=cut

# =head1 REFERENCE
# 
# =begin html
# <BLOCKQUOTE>
# <FONT SIZE="+1"><TT>RFC2461 Neighbor Discovery for IPv6</TT></FONT>
# <HR>
# <PRE>
# 7.2.2.  Sending Neighbor Solicitations
# </PRE>
# <PRE>
#    When a node has a unicast packet to send to a neighbor, but does not
#    know the neighbor's link-layer address, it performs address
#    resolution.  For multicast-capable interfaces this entails creating a
#    Neighbor Cache entry in the INCOMPLETE state and transmitting a
#    Neighbor Solicitation message targeted at the neighbor.  <U><B>The</B></U>
#    <U><B>solicitation is sent to the solicited-node multicast address</B></U>
#    <U><B>corresponding to the target address.</B></U>
# </PRE>
# <PRE>
#    <U><B>If the source address of the packet prompting the solicitation is the</B></U>
#    <U><B>same as one of the addresses assigned to the outgoing interface, that</B></U>
#    <U><B>address <FONT COLOR="#FF0000">SHOULD</FONT> be placed in the IP Source Address of the outgoing</B></U>
#    <U><B>solicitation.</B></U>  Otherwise, any one of the addresses assigned to the
#    interface should be used.  Using the prompting packet's source
#    address when possible insures that the recipient of the Neighbor
#    Solicitation installs in its Neighbor Cache the IP address that is
#    highly likely to be used in subsequent return traffic belonging to
#    the prompting packet's "connection".
# </PRE>
# <PRE>
#    <U><B>If the solicitation is being sent to a solicited-node multicast</B></U>
#    <U><B>address, the sender <FONT COLOR="#FF0000">MUST</FONT> include its link-layer address (if it has</B></U>
#    <U><B>one) as a Source Link-Layer Address option.</B></U>  Otherwise, the sender
#    <FONT COLOR="#FF0000">SHOULD</FONT> include its link-layer address (if it has one) as a Source
#    Link-Layer Address option.  Including the source link-layer address
#    in a multicast solicitation is required to give the target an address
#    to which it can send the Neighbor Advertisement.  On unicast
#    solicitations, an implementation <FONT COLOR="#FF0000">MAY</FONT> omit the Source Link-Layer
#    Address option. The assumption here is that if the sender has a
#    peer's link-layer address in its cache, there is a high probability
#    that the peer will also have an entry in its cache for the sender.
#    Consequently, it need not be sent.
# </PRE>
# <P>
# <FONT SIZE="+1"><TT>RFC2461 Neighbor Discovery for IPv6</TT></FONT>
# <HR>
# <PRE>
# 7.2.2.  Sending Neighbor Solicitations
# </PRE>
# <PRE>
#    <U><B>If no Neighbor Advertisement is received after MAX_MULTICAST_SOLICIT</B></U>
#    <U><B>solicitations, address resolution has failed.</B></U>  The sender <FONT COLOR="#FF0000">MUST</FONT> return
#    ICMP destination unreachable indications with code 3 (Address
#    Unreachable) for each packet queued awaiting address resolution.
# </PRE>
# </BLOCKQUOTE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 4861 - Neighbor Discovery for IPv6
</PRE>
</BLOCKQUOTE>

=end html

=cut

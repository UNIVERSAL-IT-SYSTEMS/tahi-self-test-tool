//
// $Name: V6LC_5_0_0 $
//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $Id: reducePMTUonlink.def,v 1.6 2005/04/27 06:27:35 akisada Exp $
//

#define	IS_ROUTER_LINK0		1

#include "./CommonHost.def"

#ifndef	FRAG_ID
#define	FRAG_ID	any
#endif

#ifdef FRAG_DEF
#include "pkt_frag.def"
#endif

//for Packt Too Big 
#ifndef PAYLOAD
#define PAYLOAD _PACKET_IPV6_NAME(echo_reply_pl1400)
#endif
//
//
// ICMP echo request
//

FEM_icmp6_echo_request(
	echo_request_pl1400,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		Identifier = PING_ID;
		SequenceNumber = PING_SN;
		payload = echo_data_1392;
	}
)
FEM_hdr_ipv6_exth(
	echo_request_pl1400_1st,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_pl1400_1st);
		exthdr	= hdr_frag_1st;
		upper	= upper_echo_1st;
	}
)
FEM_hdr_ipv6_exth(
	echo_request_pl1400_2nd,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
		HopLimit = 255;
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_pl1400_2nd);
		exthdr	= hdr_frag_2nd;
		upper	= upper_echo_2nd;
	}
)

Hdr_Fragment hdr_frag_1st {
	NextHeader	= 58;
	FragmentOffset	= 0;
	MFlag		= 1;
//	Identification	= FRAG_ID;
}

Hdr_Fragment hdr_frag_2nd {
	NextHeader	= 58;
	FragmentOffset	= 154;//1232/8;
	MFlag		= 0;
//	Identification	= FRAG_ID;
}

Payload upper_echo_1st {
	data = substr(_PACKET_IPV6_NAME(echo_request_pl1400), 40, 1232);
}

Payload upper_echo_2nd {
	data = substr(_PACKET_IPV6_NAME(echo_request_pl1400), 1272, 228);
}

FEM_icmp6_echo_request(
	echo_request_pl1400_gl,
	_HETHER_tn2nut,
	{
		_SRC(tn2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		_DST(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		HopLimit = 255;
	},
	{
		Identifier = PING_ID;
		SequenceNumber = PING_SN;
		payload = echo_data_1392;
	}
)
FEM_hdr_ipv6_exth(
	echo_request_pl1400_1st_gl,
	_HETHER_tn2nut,
	{
		_SRC(tn2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		_DST(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		HopLimit = 255;
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_pl1400_1st_gl);
		exthdr	= hdr_frag_1st;
		upper	= upper_echo_1st_gl;
	}
)
FEM_hdr_ipv6_exth(
	echo_request_pl1400_2nd_gl,
	_HETHER_tn2nut,
	{
		_SRC(tn2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		_DST(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		HopLimit = 255;
	},
	{
		header	= _HDR_IPV6_NAME(echo_request_pl1400_2nd_gl);
		exthdr	= hdr_frag_2nd;
		upper	= upper_echo_2nd_gl;
	}
)

Payload upper_echo_1st_gl {
	data = substr(_PACKET_IPV6_NAME(echo_request_pl1400_gl), 40, 1232);
}

Payload upper_echo_2nd_gl {
	data = substr(_PACKET_IPV6_NAME(echo_request_pl1400_gl), 1272, 228);
}



//
// ICMP echo reply
//

FEM_icmp6_echo_reply(
	echo_reply_pl1400,
	_HETHER_nut2tn,
	{
		_SRC(nutv6());
		_DST(tnv6());
	},
	{
		Identifier = PING_ID;
		SequenceNumber = PING_SN;
		payload = echo_data_1392;
	}
)

FEM_icmp6_echo_reply(
	echo_reply_pl1400_gl,
	_HETHER_nut2tn,
	{
		_SRC(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		_DST(tn2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
	},
	{
		Identifier = PING_ID;
		SequenceNumber = PING_SN;
		payload = echo_data_1392;
	}
)


//
// Payload Data
//

Payload echo_data_1392 {
	data = repeat(0x01, 256);
	data = repeat(0x02, 256);
	data = repeat(0x03, 256);
	data = repeat(0x04, 256);
	data = repeat(0x05, 256);
	data = repeat(0x06, 172);
}


//
// ICMPv6 Packet Too Big message
//

FEM_icmp6_packet_too_big(
	PktTooBig1280,
	_HETHER_tn2nut,
	{
		_SRC(tnv6());
		_DST(nutv6());
	},
	{
		MTU = 1280;
		payload = TooBigData_pl1400;
	}
) 

FEM_icmp6_packet_too_big(
	PktTooBig1280_gl,
	_HETHER_tn2nut,
	{
		_SRC(tn2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
		_DST(nut2v6(_GLOBAL0_UCAST_PRFX, _GLOBAL0_UCAST_PRFXLEN));
	},
	{
		MTU = 1280;
		payload = TooBigData_pl1400;
	}
) 

Payload TooBigData_pl1400 {
	data=substr(PAYLOAD, 0, 1232);
}


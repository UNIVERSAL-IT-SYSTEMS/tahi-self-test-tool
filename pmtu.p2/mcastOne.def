//
// $Name: V6LC_5_0_0 $
//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $Id: mcastOne.def,v 1.2 2005/01/06 06:49:54 akisada Exp $
//

#define	IS_ROUTER_LINK0		1

#include "./CommonHost.def"

#define	GL_MCAST_ADDR	v6("FF1E::1:2")
_HETHER_define(_hether_nut2mc, nutether(), ether("33:33:00:01:00:02"))

#ifdef FRAG_DEF
#include "pkt_frag.def"
#endif

#ifdef PAYLOAD_DATA
#include "payload_data.def"
#endif

#ifndef	HLIM
#define	HLIM		1
#endif

#ifndef	MPING_CS
#define	MPING_CS	1
#endif

#ifndef	MPING_ID
#define	MPING_ID	1
#endif

#ifndef	MPING_SEQ
#define	MPING_SEQ	1
#endif

#ifndef	FRAG_ID
#define	FRAG_ID		1
#endif


#ifndef	FRAG_M
#define	FRAG_M		1
#endif


#ifndef	PTB_MTU
#define	PTB_MTU		1400
#endif


//
// Multicast Echo Request
//

FEM_icmp6_echo_request(
	echo_request_mc1500,
	_hether_nut2mc,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(GL_MCAST_ADDR);
		PayloadLength = 1460;
	},
	{
		Identifier = any;
		SequenceNumber = any;
		payload = any;
	}
)

FEM_icmp6_echo_request(
	echo_request_mc1400,
	_hether_nut2mc,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(GL_MCAST_ADDR);
		PayloadLength = 1360;
	},
	{
		Identifier = any;
		SequenceNumber = any;
		payload = any;
	}
)

//
// ICMPv6 Packet Too Big message
//

FEM_icmp6_packet_too_big(
	PktTooBig,
	_HETHER_tn2nut,
	{
		_SRC(TR1_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
	},
	{
		MTU = PTB_MTU;
		payload = TooBigData_mc1500;
	}
) 

FEM_icmp6_packet_too_big(
	PktTooBig_others,
	_HETHER_tn2nut,
	{
		_SRC(TR1_GL0_ADDR);
		_DST(NUT_GL0_ADDR);
	},
	{
		MTU = PTB_MTU;
		payload = TooBigData_others;
	}
) 

Payload TooBigData_mc1500 {
	data = substr(_PACKET_IPV6_NAME(echo_request_ref1500), 0, 1232);
}

Payload TooBigData_others {
	data = substr(_PACKET_IPV6_NAME(echo_request_refOthers), 0, 1232);
}


//
// Reference of Echo Request
//

FEM_icmp6_echo_request(
	echo_request_ref1500,
	_hether_nut2mc,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(GL_MCAST_ADDR);
		HopLimit = HLIM;
	},
	{
		Checksum = MPING_CS;
		Identifier = MPING_ID;
		SequenceNumber = MPING_SEQ;
		payload = payloadRef;
	}
)

FEM_hdr_ipv6_exth(
	echo_request_refOthers,
	_hether_nut2mc,
	{
		_SRC(NUT_GL0_ADDR);
		_DST(GL_MCAST_ADDR);
		HopLimit = HLIM;
	},
	{
		header = _HDR_IPV6_NAME(echo_request_refOthers);
		exthdr = frag_refOthers;
		upper = payloadRef;
	}
)

Hdr_Fragment frag_refOthers {
	NextHeader = 58;
	FragmentOffset = 0;
	MFlag = FRAG_M;
	Identification = FRAG_ID;
}

//#ifndef	TMPDEF
//Payload payloadRef {
//	data = repeat(0x00, 1252);
//}
//#endif

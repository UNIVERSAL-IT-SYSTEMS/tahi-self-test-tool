//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/icmp.p2/Time_Exc.def,v 1.3 2005/11/29 12:07:12 akisada Exp $
//

#include "icmp.def"
#include "../AdvancedFunctionality.def"

#define NUT_GLOBAL_LINK1 v6merge(_GLOBAL1_UCAST_PRFX, \
	_GLOBAL1_UCAST_PRFXLEN, nutv6("Link1"))
//#define NUT_ONEOF_ADDR oneof(NUT_GLOBAL_LINK1)
#if HAS_MULTIPLE_INTERFACES != 0
#define NUT_ONEOF_ADDR oneof(NUT_GLOBAL, nutv6(), NUT_GLOBAL_LINK1)
#else	// HAS_MULTIPLE_INTERFACES
#define NUT_ONEOF_ADDR oneof(NUT_GLOBAL, nutv6())
#endif	// HAS_MULTIPLE_INTERFACES

//----------------------------------------------------------------------
// Echo Requests
//----------------------------------------------------------------------

FEM_icmp6_echo_request (
	echo_request_hop0,
	_HETHER_tn2nut,
	{
		HopLimit = 0;
		_SRC(TN_GLOBAL);
		_DST(v6(_GLOBAL1A0N_UCAST_ADDR));
	},
	{
		payload = ping_data_56;
	}
)

FEM_icmp6_echo_request (
	echo_request_hop1,
	_HETHER_tn2nut,
	{
		HopLimit = 1;
		_SRC(TN_GLOBAL);
		_DST(v6(_GLOBAL1A0N_UCAST_ADDR));
	},
	{
		payload = ping_data_56;
	}
)
Payload ping_data_1452 {
	data = repeat(0xff,1452);
}
Payload ping_data_56 {
	data = repeat(0xff,56);
}



//----------------------------------------------------------------------
// Time Exceeded and data
//----------------------------------------------------------------------

FEM_icmp6_time_exceeded(
	time_exceeded0,
	_HETHER_nut2tn,
	{
//		_SRC(oneof(nutv6(),NUT_GLOBAL, NUT_GLOBAL_LINK1));
		_SRC(NUT_ONEOF_ADDR);
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		Code = 0;       
//		payload = err_hop0;
        payload = any;
	}
)

FEM_icmp6_time_exceeded(
	time_exceeded1,
	_HETHER_nut2tn,
	{
//		_SRC(oneof(nutv6(),NUT_GLOBAL, NUT_GLOBAL_LINK1));
		_SRC(NUT_ONEOF_ADDR);
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		Code = 0;       
//		payload = err_hop1;
		payload = any;
	}
)

FEM_icmp6_time_exceeded(
	time_exceeded_any,
	_HETHER_nut2tn,
	{
//		_SRC(oneof(nutv6()NUT_GLOBAL, NUT_GLOBAL_LINK1));
		_SRC(NUT_ONEOF_ADDR);
		_DST(TN_GLOBAL);
		PayloadLength <= MAX_PAYLOAD;
	},
	{
		Code = 0;       
		payload = any;
	}
)

Payload err_hop0 {
	data = right(_PACKET_IPV6_NAME(echo_request_hop0), 0);
}

Payload err_hop1 {
	data = right(_PACKET_IPV6_NAME(echo_request_hop1), 0);
}

//
// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
// Yokogawa Electric Corporation.
// All rights reserved.
// 
// Redistribution and use of this software in source and binary
// forms, with or without modification, are permitted provided that
// the following conditions and disclaimer are agreed and accepted
// by the user:
// 
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with
//    the distribution.
// 
// 3. Neither the names of the copyrighters, the name of the project
//    which is related to this software (hereinafter referred to as
//    "project") nor the names of the contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
// 
// 4. No merchantable use may be permitted without prior written
//    notification to the copyrighters.
// 
// 5. The copyrighters, the project and the contributors may prohibit
//    the use of this software at any time.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
// BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
// COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// $TAHI: ct/icmp.p2/Err_Condition_Port_ACaddr.def,v 1.3 2006/01/10 08:40:49 akisada Exp $

#include "icmp.def"

//----------------------------------------------------------------------
// UDP packet
//----------------------------------------------------------------------

FEM_hdr_ipv6_exth(
	udp_pkt,
	_HETHER_tn2nut,
	{
		_SRC(ANY_CAST_ADDR);
		_DST(NUT_GLOBAL);
	},
	{
		header = _HDR_IPV6_NAME(udp_pkt);
		upper = udp;
	}
)

_HETHER_define(
	_HETHER_nut2solnode_for_udp_pkt,
	nutether(),
	_ETHER_SOLNODE_MCAST(ANY_CAST_ADDR)
)

FEM_icmp6_ns(
	global_ns_for_udp_pkt,
	_HETHER_nut2solnode_for_udp_pkt,
	{
		HopLimit	= 255;
		_SRC(NUT_GLOBAL);
		_DST(_IPV6_SOLNODE_MCAST(ANY_CAST_ADDR));
	},
	{
		TargetAddress	= ANY_CAST_ADDR;
		option		= _SLLOPT_nut;
	}
)

FEM_icmp6_ns(
	linklocal_ns_for_udp_pkt,
	_HETHER_nut2solnode_for_udp_pkt,
	{
		HopLimit	= 255;
		_SRC(nutv6());
		_DST(_IPV6_SOLNODE_MCAST(ANY_CAST_ADDR));
	},
	{
		TargetAddress	= ANY_CAST_ADDR;
		option		= _SLLOPT_nut;
	}
)

FEM_icmp6_na(
	global_na_for_udp_pkt,
	_HETHER_tn2nut,
	{
		HopLimit	= 255;
		_SRC(TN_GLOBAL);
		_DST(NUT_GLOBAL);
	},
	{
		RFlag		= 1;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= ANY_CAST_ADDR;
		option		= _TLLOPT_tn;
	}
)

FEM_icmp6_na(
	linklocal_na_for_udp_pkt,
	_HETHER_tn2nut,
	{
		HopLimit	= 255;
		_SRC(TN_GLOBAL);
		_DST(nutv6());
	},
	{
		RFlag		= 1;
		SFlag		= 1;
		OFlag		= 1;
		TargetAddress	= ANY_CAST_ADDR;
		option		= _TLLOPT_tn;
	}
)

//----------------------------------------------------------------------
// UDP header and data
//----------------------------------------------------------------------

Upp_UDP udp {
	header = udp_hdr;
	payload = ping_data1232;
}

Hdr_UDP udp_hdr {
	SourcePort = 9000;
	DestinationPort = 9000;
}

//----------------------------------------------------------------------
// payload  data
//----------------------------------------------------------------------

Payload ping_data1232 {
	data = repeat(0xff,1232);
}

//----------------------------------------------------------------------
// Destination Unreachable and data
//----------------------------------------------------------------------

FEM_icmp6_destination_unreachable(
	dst_unreach,
	_HETHER_nut2tn,
	{
		_SRC(oneof(NUT_GLOBAL, nutv6()));
		_DST(oneof(TN_GLOBAL,tnv6(),ANY_CAST_ADDR));
	},
	{
		Code = 4;
//		payload = err;
		payload = any;
	}
)

FEM_icmp6_destination_unreachable(
	dst_unreach_any,
	_HETHER_nut2tn,
	{
		_SRC(oneof(NUT_GLOBAL, nutv6()));
		_DST(oneof(TN_GLOBAL,tnv6(),ANY_CAST_ADDR));
	},
	{
		Code = 4;
		payload = any;
	}
)

Payload err {
	data = right(_PACKET_IPV6_NAME(udp_pkt), 0);
}

#!/usr/bin/perl
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $TAHI: ct/icmp.p2/v6LC_5_1_4_B.seq,v 1.4 2008/07/25 04:57:21 hide Exp $
#
########################################################################

use V6evalTool;

BEGIN
{
	$V6evalTool::TestVersion	= '$Name: V6LC_5_0_0 $';
}

END   {}

my $Link0			= 'Link0';
my $Link1			= 'Link1';
my $true			= 1;
my $false			= 0;
my $DELAY_FIRST_PROBE_TIME	= 5;
my $MAX_MULTICAST_SOLICIT	= 3;
my $MAX_UNICAST_SOLICIT		= 3;
my $RETRANS_TIMER		= 1;
my $TimeOut			= $RETRANS_TIMER + 1;
my $mtu_1280			= $false;
my $pim6dd			= $false;
my $tn1_cache			= $false;
my $tr1_cache			= $false;
my $tr1_default			= $false;

%pktdesc = (
	'tn2_mld_report'
		=> '    Send MLD Report: '.
			'TN2 (link-local) -&gt; ff1e::1:2',

	'tn1_ereq'
		=> '    Send Echo Request: '.
			'TN1 (global) -&gt; ff1e::1:2',

	'tr1_ereq'
		=> '    Send Echo Request: '.
			'TN1 (link-local) -&gt; RUT (link-local)',

	'tr1_erep'
		=> '    Recv Echo Reply: '.
			'RUT (link-local) -&gt; TN1 (link-local)',

	'tn1_mcast_ns_linklocal'
		=> '    Recv NS w/ SLL: '.
			'RUT (link-local) -&gt; TN1 (global)',

	'tn1_mcast_ns_global'
		=> '    Recv NS w/ SLL: '.
			'RUT (global) -&gt; TN1 (global)',

	'tn1_na_linklocal',
		=> '    Send NA (rSO) w/ TLL: '.
			'TN1 (global) -&gt; RUT (link-local)',

	'tn1_na_global',
		=> '    Send NA (rSO) w/ TLL: '.
			'TN1 (global) -&gt; RUT (global)',

	'tn1_na_cleanup'
		=> '    Send NA (rsO) w/ TLL (diff): '.
			'TN1 (link-local) -&gt; all-nodes multicast address',

	'tr1_na_cleanup'
		=> '    Send NA (RsO) w/ TLL (diff): '.
			'TR1 (link-local) -&gt; all-nodes multicast address',

	'tr1_mcast_ns_linklocal'
		=> '    Recv NS w/ SLL: '.
			'RUT (link-local) -&gt; '.
			'TR1 (link-local) solicited-node multicast address',

	'tr1_mcast_ns_global'
		=> '    Recv NS w/ SLL: '.
			'RUT (global) -&gt; '.
			'TR1 (link-local) solicited-node multicast address',

	'tr1_na_linklocal',
		=> '    Send NA (RSO) w/ TLL: '.
			'TR1 (link-local) -&gt; RUT (link-local)',

	'tr1_na_global',
		=> '    Send NA (RSO) w/ TLL: '.
			'TR1 (link-local) -&gt; RUT (global)',

	'tn1_ereq_cleanup'
		=> '    Send Echo Request: '.
			'TN1 (global) -&gt; RUT (global)',

	'tn1_erep_cleanup'
		=> '    Recv Echo Reply: '.
			'RUT (global) -&gt; TN1 (global)',

	'tr1_ereq_cleanup'
		=> '    Send Echo Request: '.
			'TR1 (link-local) -&gt; RUT (link-local)',

	'tr1_erep_cleanup'
		=> '    Recv Echo Reply: '.
			'RUT (link-local) -&gt; TR1 (link-local)',

#	'pkt_too_big_link0'
#		=> '    Recv Packet Too Big: '.
#			'RUT (global) (Link0) -&gt; TN1 (global)',

	'pkt_too_big_link1'
		=> '    Recv Packet Too Big: '.
			'RUT (global) (Link1) -&gt; TN1 (global)',
);

my %tn1_mcast_nd = (
	'tn1_mcast_ns_linklocal'	=> 'tn1_na_linklocal',
	'tn1_mcast_ns_global'		=> 'tn1_na_global',
);

my %tr1_mcast_nd = (
	'tr1_mcast_ns_linklocal'	=> 'tr1_na_linklocal',
	'tr1_mcast_ns_global'		=> 'tr1_na_global',
);



if($V6evalTool::NutDef{'Type'} ne 'router') {
	exitRouterOnly($Link0, $Link1);
	#NOTREACHED
}

vCapture($Link0);
vCapture($Link1);

unless(commonSetup_1_1($Link0)) {
	exitInitFail($Link0);
	#NOTREACHED
}



#
# 3.
# 	Configure the RUT with a link MTU
# 	equal to the IPv6 minimum link MTU (1280 octets)
# 	on its interface to Link A (to TN2).
# 	(See Note Below in Possible Problems). 
#

if(vRemote('mtuconfig.rmt',
	"if=$V6evalTool::NutDef{'Link1_device'}", 'mtu=1280', '')) {

	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'mtuconfig.rmt: Could\'t set link MTU'.
		'</B></FONT><BR>');

	exitFatal($Link0, $Link1);
}

$mtu_1280	= $true;



vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>'.
		'Test Procedure'.
                '</B></U></FONT><BR>');

# 3.
# 	Configure a multicast routing protocol on the RUT.

if(vRemote('pim6dd.rmt', 'usePim6dd=start', '')) {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'pim6dd.rmt: Could\'t enable multicast forwarding'.
		'</B></FONT><BR>');

	exitFatal($Link0, $Link1);
}

$pim6dd	= $true;



# 4.
# 	TN2 is a Listener for the multicast group FF1E::1:2.

vSend($Link1, 'tn2_mld_report');



# 5.
# 	TN1 transmits an Echo Request to the FF1E::1:2 address
# 	with a packet size of 1500 octets.

my @frames	= sort(keys(%tn1_mcast_nd));
my $bool	= $false;

vClear($Link0);

vSend($Link0, 'tn1_ereq');



# 6.
# 	Observe the packets transmitted by the RUT.

my %ret = vRecv($Link0, $TimeOut, 0, 0, @frames);
foreach my $frame (@frames) {
	if($ret{'recvFrame'} eq $frame) {
		$bool = $true;
		vSend($Link0, $tn1_mcast_nd{$frame});
		$tn1_cache = $true;
		last;
	}
}

unless($bool) {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Could\'t observe NS</B></FONT><BR>');

	exitFail($Link0, $Link1);
}

#%ret = vRecv($Link0, $TimeOut, 0, 0, 'pkt_too_big_link0', 'pkt_too_big_link1');
%ret = vRecv($Link0, $TimeOut, 0, 0, 'pkt_too_big_link1');

#if(
#	($ret{'recvFrame'} ne 'pkt_too_big_link0') &&
#	($ret{'recvFrame'} ne 'pkt_too_big_link1')
#) {
if($ret{'recvFrame'} ne 'pkt_too_big_link1') {
	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Could\'t observe Packet Too Big</B></FONT><BR>');

	exitFail($Link0, $Link1);
}

exitPass($Link0, $Link1);
#NOTREACHED



#------------------------------#
# commonSetup_1_1()            #
#------------------------------#

# Common Test Setup 1.1
# Summary:
#       This minimal setup procedure provides
#       the NUT with a default router TR1, a global prefix,
#       and ensures that the NUT can communicate with TR1.

sub
commonSetup_1_1($)
{
	my ($Link) = @_;

	vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>'.
		'Common Test Setup 1.1'.
		'</B></U></FONT><BR>');

# 2.
# 	If the NUT is a router,
# 	configure a default route with TR1 as the next hop.

	if(vRemote(
		'route.rmt',
		'cmd=add',
		'prefix=default',
		"gateway=fe80::200:ff:fe00:a0a0",
		"if=$V6evalTool::NutDef{'Link0_device'}"
	)) {
		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'route.rmt: Could\'t set route</B></FONT><BR>');
		return($false);
	}

	$tr1_default	= $true;

# 3.
# 	TR1 transmits an Echo Request to the NUT
# 	and responds to Neighbor Solicitations from the NUT.
# 	Wait for an Echo Reply from the NUT.
# 	This should cause the NUT to resolve the address of TR1
# 	and create a Neighbor Cache entry for TR1 in state REACHABLE.

	my $bool	= $false;
	my @frames	= sort(keys(%tr1_mcast_nd));

	vSend($Link, 'tr1_ereq');

	my %ret = vRecv($Link, $TimeOut, 0, 0, @frames);
	foreach my $frame (@frames) {
		if($ret{'recvFrame'} eq $frame) {
			$bool = $true;
			vSend($Link, $tr1_mcast_nd{$frame});
			$tr1_cache = $true;
			last;
		}
	}

	unless($bool) {
		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'Could\'t observe NS</B></FONT><BR>');

		return($false);
	}

	%ret = vRecv($Link, $TimeOut, 0, 0, 'tr1_erep');
	unless($ret{'recvFrame'} eq 'tr1_erep') {
		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'Could\'t observe Echo Reply</B></FONT><BR>');

		return($false);
	}

	return($true);
}



#------------------------------#
# commonCleanup()              #
#------------------------------#

# Common Test Cleanup (for all tests)
# Summary:
# 	The Cleanup procedure should cause the NUT
# 	to transition Neighbor Cache entries created in this test
# 	to state INCOMPLETE
# 	and remove any entries from its Default Router and Prefix Lists.

sub
commonCleanup($)
{
        my ($Link) = @_;

	vLogHTML('<FONT COLOR="#FF0000" SIZE="5"><U><B>'.
		'Common Test Cleanup</B></U></FONT><BR>');

	if($tn1_cache &&
		!cache_clean(
			$Link,
			'tn1_na_cleanup',
			'tn1_ereq_cleanup',
			'tn1_erep_cleanup',
			sort(keys(%tn1_mcast_nd)))) {

		return($false);
	}

	if($pim6dd &&
		vRemote('pim6dd.rmt', 'usePim6dd=stop', '')) {

		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'pim6dd.rmt: Could\'t disable multicast forwarding'.
			'</B></FONT><BR>');

		return($false);
	}

	if($mtu_1280 && vRemote('mtuconfig.rmt',
		"if=$V6evalTool::NutDef{'Link1_device'}", 'mtu=1500', '')) {

		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'mtuconfig.rmt: Could\'t set link MTU'.
			'</B></FONT><BR>');

		return($false);
	}

	if($tr1_default &&
		vRemote(
			'route.rmt',
			'cmd=delete',
			'prefix=default',
			"gateway=fe80::200:ff:fe00:a0a0",
			"if=$V6evalTool::NutDef{'Link0_device'}", '')) {

		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'route.rmt: Could\'t delete the route'.
			'</B></FONT><BR>');

		return($false);
	}

	if($tr1_cache &&
		!cache_clean(
			$Link,
			'tr1_na_cleanup',
			'tr1_ereq_cleanup',
			'tr1_erep_cleanup',
			sort(keys(%tr1_mcast_nd)))) {

		return($false);
	}

	return($true);
}



#------------------------------#
# cache_clean()                #
#------------------------------#
sub
cache_clean($$$$@)
{
        my ($Link, $na, $ereq, $erep, @ns) = @_;

# 2.
# 	Each TR or TN in the test transmits a Neighbor Advertisement
# 	for each Neighbor Cache Entry with a Source Link-layer Address Option
# 	containing a different cached address.
# 	The Override flag should be set.

	vSend($Link, $na);

# 3.
# 	Each TR or TN transmits an Echo Request to the NUT
# 	and waits for an Echo Reply.

	vSend($Link, $ereq);

	my %ret = vRecv($Link, $TimeOut, 0, 0, $erep, @ns);
	for( ; ; ) {
		my $bool = $false;

		if($ret{'recvFrame'} eq $erep) {
# 4.
# 	Each TR or TN does not respond to further Neighbor Solicitations.

			vRecv($Link,
				$DELAY_FIRST_PROBE_TIME +
					$TimeOut * $MAX_UNICAST_SOLICIT,
				0, 0);

			return($true);
		}

		foreach my $frame (@ns) {
			if($ret{'recvFrame'} eq $frame) {
				$bool = $true;

				vRecv($Link,
					$TimeOut * $MAX_MULTICAST_SOLICIT,
					0, 0);

				return($true);
			}
		}

		last;
	}

	vLogHTML('<FONT COLOR="#FF0000"><B>'.
		'Could\'t observe Echo Reply or NS</B></FONT><BR>');

	return($false);
}



#------------------------------#
# exitInitFail()               #
#------------------------------#
sub
exitInitFail($$)
{
	my ($Link0, $Link1) = @_;

	vLogHTML('<FONT COLOR="#00FF00"><B>Initialization Fail</B></FONT><BR>');
	exitCommon($Link0, $Link1, $V6evalTool::exitInitFail);
}



#------------------------------#
# exitRouterOnly()             #
#------------------------------#
sub
exitRouterOnly($$)
{
	my ($Link0, $Link1) = @_;

	vLogHTML('<FONT COLOR="#00FF00"><B>Router Only</B></FONT><BR>');
	exitCommon($Link0, $Link1, $V6evalTool::exitRouterOnly);
}



#------------------------------#
# exitFatal()                  #
#------------------------------#
sub
exitFatal($$)
{
	my ($Link0, $Link1) = @_;

	vLogHTML('<FONT COLOR="#FF0000"><B>internal error</B></FONT><BR>');
	exitCommon($Link0, $Link1, $V6evalTool::exitFatal);
}



#------------------------------#
# exitFail()                   #
#------------------------------#
sub
exitFail($$)
{
	my ($Link0, $Link1) = @_;

	vLogHTML('<FONT COLOR="#FF0000"><B>FAIL</B></FONT><BR>');
	exitCommon($Link0, $Link1, $V6evalTool::exitFail);
}



#------------------------------#
# exitPass()                   #
#------------------------------#
sub
exitPass($$)
{
        my ($Link0, $Link1) = @_;

        vLogHTML('<B>PASS</B><BR>');
        exitCommon($Link0, $Link1, $V6evalTool::exitPass);
}



#------------------------------#
# exitCommon()                 #
#------------------------------#
sub
exitCommon($$$)
{
        my ($Link0, $Link1, $ecode) = @_;

	unless(commonCleanup($Link0)) {
		vLogHTML('<FONT COLOR="#FF0000"><B>'.
			'Cleanup Fail</B></FONT><BR>');

		$ecode = $V6evalTool::exitCleanupFail;
	}

	vStop($Link1);
	vStop($Link0);

	exit($ecode);
}



#
# perldoc
#
########################################################################
__END__

=head1 NAME

=begin html
<BLOCKQUOTE><TT>
v6LC_5_1_4_B - Packet Too Big Message Generation (Multicast Destination)

=end html

=begin html
</TT></BLOCKQUOTE>

=end html

=head1 TARGET

=begin html
<BLOCKQUOTE>
<TT>Router</TT>
</BLOCKQUOTE>

=end html

=head1 TOPOLOGY

=begin html
<BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
                   TN2
                    |
----+-------+-------+--- Link1
    |       |
   TR1     RUT     TN1
    |       |       |
----+-------+-------+--- Link0
</PRE>
</BLOCKQUOTE>
<P>
<TABLE BORDER>
<TR>
<TD ROWSPAN="2"><TT>Link0</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::/64</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::/64</TT></TD>
</TR>
<TR>
<TD ROWSPAN="2"><TT>Link1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:101::/64</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::/64</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>TR1 (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100:200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::200:ff:fe00:a0a0</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>00:00:00:00:a0:a0</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>RUT (Link0)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;NutDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>RUT (Link1)</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:101::&lt;NutDef.Link1_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;NutDef.Link1_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;NutDef.Link1_addr&gt;</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>TN1</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;TnDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;TnDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;TnDef.Link0_addr&gt;</TT></TD>
</TR>
<TR>
<TD ROWSPAN="3"><TT>TN2</TT></TD>
<TD><TT>global</TT></TD>
<TD><TT>3ffe:501:ffff:100::&lt;TnDef.Link1_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>link-local</TT></TD>
<TD><TT>fe80::&lt;TnDef.Link1_addr&gt;</TT></TD>
</TR>
<TR>
<TD><TT>ether</TT></TD>
<TD><TT>&lt;TnDef.Link1_addr&gt;</TT></TD>
</TR>
</TABLE>
</BLOCKQUOTE>

=end html

=head1 SETUP

=begin html
<BLOCKQUOTE>
<TT><B>This minimal setup procedure provides the NUT with a default router TR1, a global prefix, and ensures that the NUT can communicate with TR1.</B></TT>
<BLOCKQUOTE>
<PRE>
   TR1     RUT
    |       |
    |       * configure a default route with TR1 as the next hop.
    |       |
    | ----> | Echo Request
    |   <-- | NS
    | ----> | NA
    | <---- | Echo Reply
    |       |
    |       * Configure the RUT with a link MTU equal to the IPv6 minimum link MTU (1280 octets) on its interface to Link A (to TN2).
    |       |
    |       * Configure all other interfaces on the RUT with the default link MTU for its associated media type.
    |       |
    V       V

The link MTU for RUT's interface to Link A should be smaller than its link MTU to Link B.

</PRE>
</BLOCKQUOTE>
<P>
<PRE>
1. configure a default route with TR1 as the next hop.
</PRE>
<PRE>
2. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TR1 (link-local)
            destination = RUT (link-local)
        Echo Request
</PRE>
<PRE>
3. Observe NS
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = RUT (link-local)
            destination = TR1 (solicited-node multicast address)
        NS
            target      = TR1 (link-local)
        SLL option
</PRE>
<PRE>
4. Send NA
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = TR1 (link-local)
            destination = RUT (link-local)
        NA
            R           = 1
            S           = 1
            O           = 1
            target      = TR1 (link-local)
        TLL option
</PRE>
<PRE>
5. Observe Echo Reply
</PRE>
<PRE>
        IPv6 header
            source      = RUT (link-local)
            destination = TR1 (link-local)
        Echo Reply
</PRE>
<PRE>
6. Configure the RUT with a link MTU equal to the IPv6 minimum link MTU (1280 octets) on its interface to Link A (to TN2).
</PRE>
<PRE>
7. Configure all other interfaces on the RUT with the default link MTU for its associated media type.
</PRE>
</BLOCKQUOTE>

=end html

=head1 TEST PROCEDURE

=begin html
<BLOCKQUOTE>
<TT><B>Verify that a router properly generates Packet Too Big Messages.</B></TT>
<BLOCKQUOTE>
<PRE>
   TN1     RUT     TN2
    |       |       |
    |       *       | Configure a multicast routing protocol on the RUT.
    |       |       |
    |       |   <-- | MLD Report   (ff1e::1:2)
    |       |       |
    | -->   |       | Echo Request (ff1e::1:2)
    |   <-- |       | NS
    | ----> |       | NA
    | <-----+------ | Packet Too Big <A NAME="PRC1">[<A HREF="#JDG1">Judgment #1</A>]
    |       |       |
    V       V       V
</PRE>
</BLOCKQUOTE>
<P>
<PRE>
1. Configure a multicast routing protocol on the RUT.
</PRE>
<PRE>
2. Send MLD Report
</PRE>
<PRE>
        IPv6 header
            source      = TN2 (link-local)
            destination = ff1e::1:2
        Hop-by-Hop options header
            Pad2 option
            Router Alert option
        MLD Report
            address     = ff1e::1:2
</PRE>
<PRE>
3. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TN1 (global)
            destination = ff1e::1:2
        Echo Request
</PRE>
<PRE>
4. Observe NS
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = RUT (global)
            destination = TN1 (solicited-node multicast address)
        NS
            target      = TN1 (global)
        SLL option
</PRE>
<PRE>
5. Send NA
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = TN1 (global)
            destination = RUT (global)
        NA
            R           = 0
            S           = 1
            O           = 1
            target      = TN1 (global)
        TLL option
</PRE>
<PRE>
6. Observe Packet Too Big
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = RUT (global)
            destination = TR1 (global)
        Packet Too Big
</PRE>
</BLOCKQUOTE>

=end html

=head1 JUDGEMENT

=begin html
<BLOCKQUOTE>
<TT><A NAME="JDG1">[<A HREF="#PRC1">Judgment #1</A>] The RUT must transmit a Packet Too Big message to TN1, as it could not reply to the Echo Request due to PMTU limitations.</TT><BR>
<BLOCKQUOTE>
<TT>The MTU field of Packet Too Big Message should be set to 1280.</TT><BR>
<TT>The Source Address of the Packet should be one of the RUT's unicast addresses for its interface to Link A (to TN2).</TT><BR>
<TT>The Destination Address should be the same as the Source Address in TN1's Echo Request packet.  The Code field should be set to "0".</TT><BR>
<TT>The invoking Echo Request packet included in the Error Message must not exceed minimum IPv6 MTU.</TT><BR>
</BLOCKQUOTE>
</BLOCKQUOTE>

=end html

=head1 CLEANUP

=begin html
<BLOCKQUOTE>
<TT><B>The Cleanup procedure should cause the NUT to transition Neighbor Cache entries created in this test to state INCOMPLETE and remove any entries from its Default Router and Prefix Lists.</B></TT>
<BLOCKQUOTE>
<PRE>
   TR1     TN1     RUT
    |       |       |
    |       | -->   | NA
    |       |       |
    |       | ----> | Echo Request
    |       | <---- | Echo Reply
    |       |       |
    |       *       | Wait (DELAY_FIRST_PROBE_TIME)
    |       |       |
    |       | <---- | NS
    |       | <---- | NS
    |       | <---- | NS
    |       |       |
    |       |       * Set Link1 MTU to 1500
    |       |       |
    |       |       * Disable multicast routing
    |       |       |
    |       |       * remove a default route
    |       |       |
    | -->   |       | NA
    |       |       |
    | ------------> | Echo Request
    | <------------ | Echo Reply
    |       |       |
    *       |       | Wait (DELAY_FIRST_PROBE_TIME)
    |       |       |
    | <------------ | NS
    | <------------ | NS
    | <------------ | NS
    |       |       |
    V       V       V
</PRE>
</BLOCKQUOTE>
<P>
<PRE>
1. Send NA w/ TLL (diff)
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = TN1 (link-local)
            destination = all-nodes multicast address
        NA
            R           = 0
            S           = 0
            O           = 1
            target      = TN1 (link-local)
        TLL option
            address     = TNX (ether)
</PRE>
<PRE>
2. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TN1 (global)
            destination = RUT (global)
        Echo Request
</PRE>
<PRE>
3. Observe Echo Reply
</PRE>
<PRE>
        IPv6 header
            source      = RUT (global)
            destination = TN1 (global)
        Echo Reply
</PRE>
<PRE>
4. Wait (DELAY_FIRST_PROBE_TIME)
</PRE>
<PRE>
        Node constants:
            DELAY_FIRST_PROBE_TIME: 5 seconds
</PRE>
<PRE>
5. Observe MAX_UNICAST_SOLICIT NSs
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = RUT (global)
            destination = TN1 (global)
        NS
            target      = TN1 (global)
        SLL option
</PRE>
<PRE>
        Node constants:
            MAX_UNICAST_SOLICIT: 3 transmissions
</PRE>
<PRE>
6. Set Link1 MTU to 1500
</PRE>
<PRE>
7. Disable multicast routing
</PRE>
<PRE>
8. remove a default route
</PRE>
<PRE>
9. Send NA w/ TLL (diff)
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = TR1 (link-local)
            destination = all-nodes multicast address
        NA
            R           = 1
            S           = 0
            O           = 1
            target      = TR1 (link-local)
        TLL option
            address     = TRX (ether)
</PRE>
<PRE>
10. Send Echo Request
</PRE>
<PRE>
        IPv6 header
            source      = TR1 (link-local)
            destination = HUT (link-local)
        Echo Request
</PRE>
<PRE>
11. Observe Echo Reply
</PRE>
<PRE>
        IPv6 header
            source      = HUT (link-local)
            destination = TR1 (link-local)
        Echo Reply
</PRE>
<PRE>
12. Wait (DELAY_FIRST_PROBE_TIME)
</PRE>
<PRE>
        Node constants:
            DELAY_FIRST_PROBE_TIME: 5 seconds
</PRE>
<PRE>
13. Observe MAX_UNICAST_SOLICIT NSs
</PRE>
<PRE>
        IPv6 header
            hop limit   = 255
            source      = HUT (link-local)
            destination = TR1 (link-local)
        NS
            target      = TR1 (link-local)
        SLL option
</PRE>
<PRE>
        Node constants:
            MAX_UNICAST_SOLICIT: 3 transmissions
</PRE>
</BLOCKQUOTE>

=end html

=cut

# =head1 REFERENCE
# 
# =begin html
# <BLOCKQUOTE>
# <PRE>
# 3.2 Packet Too Big Message
# </PRE>
# <PRE>
#        0                   1                   2                   3
#        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#       |     Type      |     Code      |          Checksum             |
#       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#       |                             MTU                               |
#       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#       |                    As much of invoking packet                 |
#       +               as will fit without the ICMPv6 packet           +
#       |               exceeding the minimum IPv6 MTU [IPv6]           |
# </PRE>
# <PRE>
#    IPv6 Fields:
# </PRE>
# <PRE>
#    Destination Address
# </PRE>
# <PRE>
#                   Copied from the Source Address field of the invoking
#                   packet.
# </PRE>
# <PRE>
#    ICMPv6 Fields:
# </PRE>
# <PRE>
#    Type           2
# </PRE>
# <PRE>
#    Code           Set to 0 (zero) by the sender and ignored by the
#                   receiver
# </PRE>
# <PRE>
#    MTU            The Maximum Transmission Unit of the next-hop link.
# </PRE>
# <PRE>
#   Description
# </PRE>
# <PRE>
#    A Packet Too Big <FONT COLOR="#FF0000">MUST</FONT> be sent by a router in response to a packet
#    that it cannot forward because the packet is larger than the MTU of
#    the outgoing link.  The information in this message is used as part
#    of the Path MTU Discovery process [PMTU].
# </PRE>
# <PRE>
#    <U><B>Sending a Packet Too Big Message makes an exception to one of the</B></U>
#    <U><B>rules of when to send an ICMPv6 error message, in that unlike other</B></U>
#    <U><B>messages, it is sent in response to a packet received with an IPv6</B></U>
#    <U><B>multicast destination address, or a link-layer multicast or link-</B></U>
#    <U><B>layer broadcast address.</B></U>
# </PRE>
# <PRE>
#    Upper layer notification
# </PRE>
# <PRE>
#    An incoming Packet Too Big message <FONT COLOR="#FF0000">MUST</FONT> be passed to the upper-layer
#    process.
# </PRE>
# </BLOCKQUOTE>
# 
# =end html
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 4443 - ICMPv6 (ICMP for IPv6)
</PRE>
</BLOCKQUOTE>

=end html

=cut

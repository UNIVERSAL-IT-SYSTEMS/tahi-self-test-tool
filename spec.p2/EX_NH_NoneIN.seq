#!/usr/bin/perl
#
# $Name: V6LC_5_0_0 $
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: EX_NH_NoneIN.seq,v 1.12 2010/03/24 08:52:13 akisada Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: V6LC_5_0_0 $';
}

use V6evalTool;
use CommonSPEC;
use lib '../';
use AdvancedFunctionality;

if ($V6evalTool::NutDef{'Type'} ne 'router') {
    vLogHTML("This test is for the router only<BR>");
    exit($V6evalTool::exitRouterOnly);
}

unless($AdvancedFunctionality::HAS_MULTIPLE_INTERFACES) {
	my $srcaddr   =  vMAC2LLAddr($V6evalTool::NutDef{'Link0_addr'});
	   $srcaddr   =~ s/fe80::/3ffe:501:ffff:100:/;

	my $dstaddr   =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});
	   $dstaddr   =~ s/fe80::/3ffe:501:ffff:110:/;

	my $insrcaddr =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});
	   $insrcaddr =~ s/fe80::/3ffe:501:ffff:100:/;

	my $indstaddr =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});
	   $indstaddr =~ s/fe80::/3ffe:501:ffff:101:/;

	my $gateway   =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});

	my $Link0_device = $V6evalTool::NutDef{'Link0_device'};

	if(vRemote('route.rmt', 'cmd=add',
		"prefix=3ffe:501:ffff:110::", 'prefixlen=64',
		"gateway=$gateway", "if=$Link0_device")) {

		vLogHTML('<FONT COLOR="#FF0000">route.rmt: '.
			'Can\'t configure the route.</FONT><BR>');

		exit($V6evalTool::exitFatal);
	}

	if(vRemote('tunnel.rmt',
		'if=0 '.
		'prefixlen=64 '.
		'routeprefixlen=64 '.
		'addrfamily=inet6 '.
		"prefix=3ffe:501:ffff:101:: ".
		"srcaddr=$srcaddr ".
		"dstaddr=$dstaddr ".
		"insrcaddr=$insrcaddr ".
		"indstaddr=$indstaddr ")) {

		vLogHTML('<FONT COLOR="#FF0000">tunnel.rmt: '.
			'Can\'t configure the tunnel.</FONT><BR>');

		exit($V6evalTool::exitFatal);
	}
}

$pktdesc{'echo_request_to_link0'}	= 'Send Echo Request to Link0 '.
						'(No Next Header after '.
						'Destination Options Header)';
$pktdesc{'echo_request_from_link1'}	= 'Recv forwarded Echo Request '.
						'from Link1 '.
						'(No Next Header after '.
						'Destination Options Header)';

$endStatus = $V6evalTool::exitPass;
$IF0 = 'Link0';
$IF1 = 'Link1';

vCapture($IF0);

if($AdvancedFunctionality::HAS_MULTIPLE_INTERFACES) {
	vCapture($IF1);
}

#----- test
vSend($IF0, 'echo_request_to_link0');
%ret = nd_vRecv_IN($AdvancedFunctionality::HAS_MULTIPLE_INTERFACES? $IF1: $IF0,
	$CommonSPEC::wait_reply, 0, 0, 'echo_request_from_link1');

if ($ret{'status'} == 0) {
	vLogHTML('OK<BR>');
} else {
	vLogHTML('Cannot receive forwarded Echo Request<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
}
#----- end test

if($AdvancedFunctionality::HAS_MULTIPLE_INTERFACES) {
	$ret = cleanup($IF0, $IF1);
} else {
	$ret = cleanup_tunnel($IF0);
}
vStop($IF0);

if($AdvancedFunctionality::HAS_MULTIPLE_INTERFACES) {
	vStop($IF1);
}

if ($ret == $CommonSPEC::Success) {
	exit($endStatus);
} else {
	exit($V6evalTool::exitFatal);
}



#----------------------------------------------------------------------#
sub
cleanup_tunnel($)
{
	my ($link) = @_;

	my $ret = cleanup($IF0);

	my $srcaddr   =  vMAC2LLAddr($V6evalTool::NutDef{'Link0_addr'});
	   $srcaddr   =~ s/fe80::/3ffe:501:ffff:100:/;

	my $dstaddr   =  vMAC2LLAddr($V6evalTool::NutDef{'Link0_addr'});
	   $dstaddr   =~ s/fe80::/3ffe:501:ffff:110:/;

	my $insrcaddr =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});
	   $insrcaddr =~ s/fe80::/3ffe:501:ffff:100:/;

	my $indstaddr =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});
	   $indstaddr =~ s/fe80::/3ffe:501:ffff:101:/;

	my $gateway   =  vMAC2LLAddr($V6evalTool::TnDef{'Link0_addr'});

	my $Link0_device = $V6evalTool::NutDef{'Link0_device'};

	if(vRemote('route.rmt', 'cmd=delete',
		"prefix=3ffe:501:ffff:110::", 'prefixlen=64',
		"gateway=$gateway", "if=$Link0_device")) {

		vLogHTML('<FONT COLOR="#FF0000">route.rmt: '.
			'Can\'t configure the route.</FONT><BR>');

		exit($V6evalTool::exitFatal);
	}

	if(vRemote('tunnel.rmt',
		'if=0 '.
		'deletetunnel '.
		'prefixlen=64 '.
		'routeprefixlen=64 '.
		'addrfamily=inet6 '.
		"prefix=3ffe:501:ffff:101:: ".
		"srcaddr=$srcaddr ".
		"dstaddr=$dstaddr ".
		"insrcaddr=$insrcaddr ".
		"indstaddr=$indstaddr ")) {

		vLogHTML('<FONT COLOR="#FF0000">tunnel.rmt: '.
			'Can\'t configure the tunnel.</FONT><BR>');

		exit($V6evalTool::exitFatal);
	}

	return($ret);
}



######################################################################
__END__

=head1 NAME

  EX_NH_NoneIN - No Next Header after Extension Header - Intermediate Node (Router Only)

=head1 TARGET

  Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./EX_NH_NoneIN.seq">EX_NH_NoneIN.seq</A> [-tooloption ...] -pkt <A HREF="./EX_NH_NoneIN.def">EX_NH_NoneIN.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  None

=head1 TEST PROCEDURE

Verify proper behavior of a node when it encounters a Next Header value of 59 (no next header).

   TN1                         RUT                         TN2
              (Link0)                     (Link1)
    |                           |                           |
    |-------------------------->|                           |
    |   Echo Request to Link0   |                           |
    |                           |                           |
    |                           |-------------------------->|
    |                           |   Echo Request to Link1   |
    |                           |                           |
    v                           v                           v

  1. TN1 transmits an Echo Request with a first hop through the RUT.
     The Echo Request contains a Destination Options header with a Next Header of 59.
     Following the Destination Options header is an ICMPv6 Echo Request header.
  2. Observe the packets transmitted by the RUT on Link1.

  Test Packet to Target Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 32
            NextHeader         = 60 (Destination Options Header)
            SourceAddress      = TN1 Address
            DestinationAddress = TN2 Address

        Destination Options Header
            NextHeader      = 59 (None)
            HeaderExtLength = 0
            OptionType      = 1 (PadN)
            OptDataLength   = 4
            pad             = {0, 0, 0, 0}

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff
            SequenceNumber = 1
            PayloadData    = {1, 2, 3, 4, 5, 6, 7, 8}

=head1 JUDGEMENT

  PASS: The RUT should forward the Echo Request to TN2 on Link1.
        The octets past the end of the header whose Next Header field contains 59 must be unchanged.

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 32
            NextHeader         = 60 (Destination Options Header)
            SourceAddress      = TN1 Address
            DestinationAddress = TN2 Address

        Destination Options Header
            NextHeader      = 59 (None)  <= must be unchanged
            HeaderExtLength = 0
            OptionType      = 1 (PadN)
            OptDataLength   = 4
            pad             = {0, 0, 0, 0}

        ICMP Echo Request                <= must be unchanged
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = 0xffff
            SequenceNumber = 1
            PayloadData    = {1, 2, 3, 4, 5, 6, 7, 8}

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 4.7 No Next Header
# 
#    The value 59 in the Next Header field of an IPv6 header or any
#    extension header indicates that there is nothing following that
#    header.  If the Payload Length field of the IPv6 header indicates the
#    presence of octets past the end of a header whose Next Header field
#    contains 59, those octets must be ignored, and passed on unchanged if
#    the packet is forwarded.
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 2460 - IPv6 Specification
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut


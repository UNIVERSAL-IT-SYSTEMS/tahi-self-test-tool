#!/usr/bin/perl
#
# $Name: V6LC_5_0_0 $
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: IP_NH_Unexpected.seq,v 1.7 2008/07/31 02:40:32 hide Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: V6LC_5_0_0 $';
}

use V6evalTool;
use CommonSPEC;

$pktdesc{'echo_request_ux'}	= 'Send Echo Request with Unexpected Next Header';
$pktdesc{'icmperr'}		= 'Recv ICMP Error (Parameter Problem, unrecognized IPv6 option encountered)';
$pktdesc{'echo_reply'}		= 'Recv Echo Reply';

$endStatus = $V6evalTool::exitPass;
$IF = 'Link0';

vCapture($IF);

#----- test
vSend($IF, 'echo_request_ux');
%ret = nd_vRecv_EN($IF, $CommonSPEC::wait_reply, 0, 0, 'icmperr', 'echo_reply');

if ($ret{'status'} == 0) {
	if ($ret{'recvFrame'} eq 'icmperr') {
		vLogHTML('OK<BR>');
	} elsif ($ret{'recvFrame'} eq 'echo_reply') {
		vLogHTML('Received invalid Echo Reply<BR');
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
		$endStatus = $V6evalTool::exitFail;
	}
} else {
	vLogHTML('Cannot receive ICMP Error message<BR>');
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
}
#----- end test

$ret = cleanup($IF);
vStop($IF);
if ($ret == $CommonSPEC::Success) {
	exit($endStatus);
} else {
	exit($V6evalTool::exitFatal);
}


######################################################################
__END__

=head1 NAME

  IP_NH_Unexpected - Unexpected Next Header in IPv6 Header

=head1 TARGET

  Host and Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./IP_NH_Unexpected.seq">IP_NH_Unexpected.seq</A> [-tooloption ...] -pkt <A HREF="./IP_NH_Unexpected.def">IP_NH_Unexpected.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  None

=head1 TEST PROCEDURE

Verify that a node generates the appropriate response to aan unexpected Next Header field.

   TN                          NUT
    |                           |
    |-------------------------->|
    |   Test Packet             |
    |                           |
    |                           |
    |<--------------------------|
    |   ICMP Error              |
    |                           |
    v                           v

  1. TN transmits Test Packet to the NUT, which has an IPv6 header with a Next Header field of 0.
     The actual extension header that follows is a Fragment header.
     The Fragment ID is 135.
  2. Observe the packets transmitted by the NUT.

  Test Packet to Target Data is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 16
            NextHeader         = 0 (Hop-by-Hop Options Header)
            SourceAddress      = TN Address
            DestinationAddress = NUT Address

        Fragment Header                      as HbH Options Header
            NextHeader      = 58 (ICMPv6)    <= Next Header
            Fragment Offset = 0              <= Option (Pad1)
            MFlag           = 0              <= Option (Pad1)
            Fragment ID     = 34560 (0x8700) <= Option (Undefined)

        ICMP Echo Request

=head1 JUDGEMENT

  PASS: The NUT would interpret the Fragment header as a Hop-by-Hop Options header.
        Thus, the Fragment ID would be interpreted ad if it were an Option Type.
        The NUT should send an ICMPv6 Parameter Problem message to TN.
        The Code field should be 2(unrecognized IPv6 Option encountered).
        The Pointerfield should be 0x2e(offset of the Fragment ID in the Fragment header).
        The NUT should discard Test Packet and should not send an Echo Reply to TN.

  ICMP Parameter Problem message is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 56
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = NUT Address
            DestinationAddress = TN Address

        ICMP Error
            Type           = 4 (Parameter Problem)
            Code           = 2 (unrecognized IPv6 Option encountered)
            Checksum       = (auto)
            Pointer        = 46 (Offset to Fragment ID in Fragment Header)
            PayloadData    = (Sent Packet)

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 4.  IPv6 Extension Headers
# 
#    If, as a result of processing a header, a node is required to proceed
#    to the next header but the Next Header value in the current header is
#    unrecognized by the node, it should discard the packet and send an
#    ICMP Parameter Problem message to the source of the packet, with an
#    ICMP Code value of 1 ("unrecognized Next Header type encountered")
#    and the ICMP Pointer field containing the offset of the unrecognized
#    value within the original packet.  The same action should be taken if
#    a node encounters a Next Header value of zero in any header other
#    than an IPv6 header.
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 2460 - IPv6 Specification
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut


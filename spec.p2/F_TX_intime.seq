#!/usr/bin/perl
#
# $Name: V6LC_5_0_0 $
#
# Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Yokogawa Electric Corporation.
# All rights reserved.
# 
# Redistribution and use of this software in source and binary
# forms, with or without modification, are permitted provided that
# the following conditions and disclaimer are agreed and accepted
# by the user:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with
#    the distribution.
# 
# 3. Neither the names of the copyrighters, the name of the project
#    which is related to this software (hereinafter referred to as
#    "project") nor the names of the contributors may be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
# 
# 4. No merchantable use may be permitted without prior written
#    notification to the copyrighters.
# 
# 5. The copyrighters, the project and the contributors may prohibit
#    the use of this software at any time.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHTERS, THE PROJECT AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
# BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE, ARE DISCLAIMED.  IN NO EVENT SHALL THE
# COPYRIGHTERS, THE PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $Id: F_TX_intime.seq,v 1.9 2008/07/31 02:40:32 hide Exp $
#
######################################################################
BEGIN {
	$V6evalTool::TestVersion = '$Name: V6LC_5_0_0 $';
}

use V6evalTool;
use CommonSPEC;

$discard_te = $CommonSPEC::exceed_max;
$delay	    = $CommonSPEC::exceed_min;
			# wait time of ICMP Time Exceeded (sec.)

$pktdesc{'echo_request_1st'}	= 'Send Echo Request (1st fragment)';
$pktdesc{'echo_request_2nd'}	= 'Send Echo Request (2nd fragment)';
$pktdesc{'echo_request_3rd'}	= 'Send Echo Request (3rd fragment)';
$pktdesc{'echo_reply'}		= 'Recv Echo Reply';
$pktdesc{'time_exceeded_1st'}	= 'Recv ICMPv6 Time Exceeded (1st fragment)';

$endStatus = $V6evalTool::exitPass;

#----- create Fragment ID
$id = time & 0x00000fff;
$fid = sprintf("0x0%07x", $id);
$rid = sprintf("0x0%03x", $id);
$sno = 0;

vCPP("-DFRAG_ID=$fid -DREQ_ID=$rid -DSEQ_NO=$sno");
################################################################
$IF = 'Link0';

vCapture($IF);

#======================================================================
if (setup11_v6LC_1_3_2($IF) != $CommonSPEC::Success) {
        $ret = cleanup($IF);
        if ($ret == $CommonSPEC::Success) {
                exit($V6evalTool::exitFail);
        } else {
                exit($V6evalTool::exitFatal);
        }
}
#======================================================================

#----- test
vSend($IF, 'echo_request_1st');

($recv_time, %ret) = nr_vRecv_EN($IF, $delay, 'time_exceeded_1st');
if ($ret{'status'} == 0 and $ret{'recvFrame'} eq 'time_exceeded_1st') {
	vLogHTML("Exceed too fast ($recv_time sec.)<BR>");
	vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
	$endStatus = $V6evalTool::exitFail;
} else {
	vSend($IF, 'echo_request_2nd');
	vSend($IF, 'echo_request_3rd');
	%ret = nd_vRecv_EN($IF, $CommonSPEC::wait_reply, 0, 0, 'echo_reply');

	if ($ret{'status'} == 0) {
		vLogHTML('OK<BR>');
	} else {
		vLogHTML('<FONT COLOR="#FF0000">NG</FONT><BR>');
		vSleep($discard_te, "Discard Unexpected 'ICMP Time Exceeded' message ($discard_te sec)");
		$endStatus = $V6evalTool::exitFail;
	}
}
#----- end test

$ret = cleanup_v6LC_1_3_2($IF);
vStop($IF);
if ($ret == $CommonSPEC::Success) {
	exit($endStatus);
} else {
	exit($V6evalTool::exitFatal);
}


######################################################################
__END__

=head1 NAME

  F_TX_intime - Reassembly Time Exceeded (Time Elapsed Between Fragments less than Sixty Seconds)

=head1 TARGET

  Host and Router

=head1 SYNOPSIS

=begin html
<PRE>
  <A HREF="./F_TX_intime.seq">F_TX_intime.seq</A> [-tooloption ...] -pkt <A HREF="./F_TX_intime.def">F_TX_intime.def</A>
    -tooloption : v6eval tool option
</PRE>

=end html

=head1 INITIALIZATION

  Common Test Setup 1.1

=head1 TEST PROCEDURE

Verify that a node takes the proper actions when th reassembly time has been exceeded for a packet.

   TN                          NUT
    |                           |
    |-------------------------->|
    |   Echo Request (1st)      |
    |                           |
    |                           |
    |   wait for 55 sec.        |
    |                           |
    |                           |
    |-------------------------->|
    |   Echo Request (2nd)      |
    |                           |
    |-------------------------->|
    |   Echo Request (3rd)      |
    |                           |
    |<--------------------------|
    |   Echo Reply              |
    |                           |
    |                           |
    v                           v

  1. TN transmits 1st, 2nd and 3rd Fragments in order.
     There is a 55-second delay between the transmission of 1st Fragment and 2nd, 3rd Fragments.
  2. Observe the packets transmitted by the NUT.

  Echo Request Data (original) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 88
            NextHeader         = 58 (ICMPv6)
            SourceAddress      = TN Global Address
            DestinationAddress = NUT Global Address

        ICMP Echo Request
            Type           = 128 (Echo Request)
            Code           = 0
            Checksum       = (auto)
            Identifier     = (auto)
            SequenceNumber = 0
            PayloadData    = data repeat{0x1, 40}
                             data repeat{0x2, 40}

  Echo Request Data (1st fragment) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 40
            NextHeader         = 44 (Fragment Header)
            SourceAddress      = TN Global Address
            DestinationAddress = NUT Global Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            FragmentOffset     = 0
            MFlag              = 1
            Identification     = 32bit (Automatic generation)

        Payload
            data               = 32 octets from the head of ICMP Echo request

  Echo Request Data (2nd fragment) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 40
            NextHeader         = 44 (Fragment Header)
            SourceAddress      = TN Global Address
            DestinationAddress = NUT Global Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            FragmentOffset     = 4
            MFlag              = 1
            Identification     = 32bit (Automatic generation)

        Payload
            data               = 32 octets from the back of ICMP Echo request

  Echo Request Data (3rd fragment) is:

        IPv6 Header
            Version            = 6
            Traffic Class      = 0
            FlowLabel          = 0
            PayloadLength      = 32
            NextHeader         = 44 (Fragment Header)
            SourceAddress      = TN Global Address
            DestinationAddress = NUT Global Address

        Fragment Header
            NextHeader         = 58 (ICMPv6)
            FragmentOffset     = 8
            MFlag              = 0
            Identification     = 32bit (Automatic generation)

        Payload
            data               = 24 octets from the back of ICMP Echo request

=head1 JUDGEMENT

  PASS: 2nd and 3rd Fragments arrive just before the NUT's reassembly timer expires for 1st Fragment.
        The NUT must transmit an Echo Reply to TN in response to the reassembled Echo Request.

        IPv6 Header
            Version             = 6
            Traffic Class       = 0
            FlowLabel           = 0
            PayloadLength       = 88
            NextHeader          = 58 (ICMPv6)
            SourceAddress       = NUT Global Address
            Destination Address = TN Global Address

        ICMP Echo Reply
            Type           = 129 (Echo Reply)
            Code           = 0
            Checksum       = (auto)
            Identifier     = (same as Echo Request)
            SequenceNumber = (same as Echo Request)
            PayloadData    = (same as Echo Request)

=head1 CLEANUP

Common Test Cleanup

=cut

# =head1 REFERENCE
# 
# RFC2460
# 
# 4.5  Fragment Header
# 
#    The following error conditions may arise when reassembling fragmented
#    packets:
# 
# =begin html
# <PRE>
#       <B>If insufficient fragments are received to complete reassembly of a
#       packet within 60 seconds of the reception of the first-arriving
#       fragment of that packet, reassembly of that packet must be
#       abandoned and all the fragments that have been received for that
#       packet must be discarded.  If the first fragment (i.e., the one
#       with a Fragment Offset of zero) has been received, an ICMP Time
#       Exceeded -- Fragment Reassembly Time Exceeded message should be
#       sent to the source of that fragment.</B>
# </PRE>
# 
# =end html
# 
#       If the length of a fragment, as derived from the fragment packet's
#       Payload Length field, is not a multiple of 8 octets and the M flag
#       of that fragment is 1, then that fragment must be discarded and an
#       ICMP Parameter Problem, Code 0, message should be sent to the
#       source of the fragment, pointing to the Payload Length field of
#       the fragment packet.
# 
#       If the length and offset of a fragment are such that the Payload
#       Length of the packet reassembled from that fragment would exceed
#       65,535 octets, then that fragment must be discarded and an ICMP
#       Parameter Problem, Code 0, message should be sent to the source of
#       the fragment, pointing to the Fragment Offset field of the
#       fragment packet.
# 
#    The following conditions are not expected to occur, but are not
#    considered errors if they do:
# 
#       The number and content of the headers preceding the Fragment
#       header of different fragments of the same original packet may
#       differ.  Whatever headers are present, preceding the Fragment
#       header in each fragment packet, are processed when the packets
#       arrive, prior to queueing the fragments for reassembly.  Only
#       those headers in the Offset zero fragment packet are retained in
#       the reassembled packet.
# 
#       The Next Header values in the Fragment headers of different
#       fragments of the same original packet may differ.  Only the value
#       from the Offset zero fragment packet is used for reassembly.
# 

=pod

=head1 REFERENCE

=begin html
<BLOCKQUOTE>
<PRE>
RFC 2460 - IPv6 Specification
</PRE>
</BLOCKQUOTE>

=end html

=head1 SEE ALSO

  perldoc V6evalTool

=cut

